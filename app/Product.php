<?phpnamespace App;use Illuminate\Database\Eloquent\Model;use Illuminate\Database\Eloquent\SoftDeletes;use File;use Illuminate\Database\Eloquent\Builder;class Product extends Model{    /**     * The database table used by the model.     *     * @var string     */    protected $table = 'products';    /**    * The database primary key value.    *    * @var string    */    protected $primaryKey = 'id';                   /**     * belongs To relation User     */    public function company()    {    	return $this->belongsTo(Company::class);    }        /**     * belongs To relation User     */    public function supplier()    {    	return $this->belongsTo(Supplier::class);    }        /**     * belongs To relation Store_products     */    public function store_products()    {    	return $this->hasMany(Store_products::class, 'product_id');    }        /**     * has Many relation Category_products     */    public function category_products()    {    	return $this->hasMany(Category_products::class, 'product_id');    }                /**     * has Many relation Product Images     */    public function product_images()    {    	return $this->hasMany(Product_images::class, 'product_id');    }        /**     * belongs To relation Product     */    public function product()    {    	return $this->belongsTo(Product::class,'product_id');    }        /**     * has Many relation Products     */    public function products()    {    	return $this->hasMany(Product::class, 'product_id');    }        /**     * has Many relation Product Attributes     */    public function product_attributes()    {    	return $this->hasMany(Product_attribute::class, 'product_id');    }        /**     * has Many relation Product Variants     */    public function product_variants()    {    	return $this->hasMany(Product_variant::class, 'variant_product_id');    }                /**     * has Many relation Product Combos     */    public function product_combos()    {    	return $this->hasMany(Product_combos::class, 'combo_product_id');    }        /**     * has Many relation Product Variant     */    public function product_tags()    {    	return $this->hasMany(Product_tag::class, 'product_id');    }    public function stocks()    {        return $this->hasMany(Stock::class, 'product_id');    }        /**     * belongs To relation tax_rate     */    public function tax_rate()    {    	return $this->belongsTo(Tax_rates::class, 'tax_rate_id');    }        /**     * hasMany relation Product_modifier     */    public function product_modifiers()    {    	return $this->hasMany(Product_modifier::class,'product_id');    }    /**     * Scopes    */        /**     * Scope a query to only include popular users.     *     * @param \Illuminate\Database\Eloquent\Builder $query and $company_id     * @return \Illuminate\Database\Eloquent\Builder     */    public function scopeCompany (Builder $query, $company_id) {                return $query->whereHas('company', function ($q) use ($company_id) {                $q->where('company_id', $company_id);        });            }            /**     * Scope a query to only include popular users.     *     * @param \Illuminate\Database\Eloquent\Builder $query and $category_ids     * @return \Illuminate\Database\Eloquent\Builder     */    public function scopeStores (Builder $query, $store_id) {                return $query->whereHas('store_products', function ($q) use ($store_id) {                $q->where('store_id', $store_id);        });            }        /**     * Scope a query to only include popular users.     *     * @param \Illuminate\Database\Eloquent\Builder $query and $category_ids     * @return \Illuminate\Database\Eloquent\Builder     */    public function scopeCategories (Builder $query, $category_ids) {                return $query->whereHas('category_products', function ($q) use ($category_ids) {                $q->whereIn('category_id', $category_ids);        });            }        /**     * boot     */    protected static function boot ()    {    	parent::boot();    	static::deleting(function($product) {                        $product->products()->delete();            $product->store_products()->delete();            $product->category_products()->delete();            $product->product_attributes()->delete();            $product->product_variants()->delete();            $product->product_tags()->delete();            $product->stocks()->delete();                        foreach ($product->product_images()->get() as $image) {                    //remove image                    $destinationPath = 'uploads/products/';                    $thumbsDestinationPath = 'uploads/products/thumbs/';                    File::delete($destinationPath . $image->name);                    File::delete($thumbsDestinationPath . $image->name);                                        $image->delete();            }                            	});                //static::updating(function($product) {            //echo 'static::updating in Product Model';            //dd($product);        //});    }    /**     * The attributes that should be hidden for arrays.     *     * @var array     */   protected $hidden = [       'is_active', 'created_at', 'updated_at', 'deleted_at'   ];        /**     * Attributes that should be mass-assignable.     *     * @var array     */    protected $fillable = ['company_id', 'name', 'product_id', 'code', 'sku', 'supplier_id', 'tax_rate_id', 'type', 'barcode_symbology', 'cost', 'price', 'is_variants', 'is_modifier', 'discount_type', 'discount', 'detail', 'invoice_detail', 'is_active','is_default','is_main_price','is_main_tax','is_duty'];    use SoftDeletes;    protected $dates = ['deleted_at'];}